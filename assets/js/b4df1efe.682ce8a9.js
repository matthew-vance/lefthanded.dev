"use strict";(self.webpackChunklefthanded_dev=self.webpackChunklefthanded_dev||[]).push([[520],{9613:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>f});var a=n(9496);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function p(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=a.createContext({}),l=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):p(p({},t),e)),n},c=function(e){var t=l(e.components);return a.createElement(o.Provider,{value:t},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),m=l(n),u=r,f=m["".concat(o,".").concat(u)]||m[u]||d[u]||i;return n?a.createElement(f,p(p({ref:t},c),{},{components:n})):a.createElement(f,p({ref:t},c))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,p=new Array(i);p[0]=u;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s[m]="string"==typeof e?e:r,p[1]=s;for(var l=2;l<i;l++)p[l]=n[l];return a.createElement.apply(null,p)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},2141:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>p,default:()=>m,frontMatter:()=>i,metadata:()=>s,toc:()=>l});var a=n(4778),r=(n(9496),n(9613));const i={title:"Bash Script Best Practices",tags:["bash"]},p=void 0,s={unversionedId:"bash-script-best-practices",id:"bash-script-best-practices",title:"Bash Script Best Practices",description:"When writing Bash scripts these are a few best practices to follow:",source:"@site/docs/bash-script-best-practices.md",sourceDirName:".",slug:"/bash-script-best-practices",permalink:"/wiki/bash-script-best-practices",draft:!1,editUrl:"https://github.com/matthew-vance/lefthanded.dev/tree/main/docs/bash-script-best-practices.md",tags:[{label:"bash",permalink:"/wiki/tags/bash"}],version:"current",lastUpdatedBy:"Matthew Vance",lastUpdatedAt:1675773118,formattedLastUpdatedAt:"Feb 7, 2023",frontMatter:{title:"Bash Script Best Practices",tags:["bash"]},sidebar:"tutorialSidebar",previous:{title:"Automatic Set Upstream for New Git Branches",permalink:"/wiki/auto-set-upstream"},next:{title:"Safely Reading Environment Variables in NodeJS",permalink:"/wiki/safely-reading-env-vars-in-nodejs"}},o={},l=[{value:"Example Boilerplate",id:"example-boilerplate",level:2}],c={toc:l};function m(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"When writing Bash scripts these are a few best practices to follow:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Shebang")),(0,r.kt)("p",{parentName:"li"},"All bash scripts should start with a shebang. This tells the OS what binary to use as the script interpreter."),(0,r.kt)("admonition",{parentName:"li",type:"tip"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("inlineCode",{parentName:"p"},"#!/usr/bin/env bash")," is more portable than ",(0,r.kt)("inlineCode",{parentName:"p"},"#!/bin/bash"),"."))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Prefer long parameter notation")),(0,r.kt)("p",{parentName:"li"},"Using the full names of parameters makes the script easier to read."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'# Avoid:\nrm -rf -- "${dir}"\n\n# Good:\nrm --recursive --force -- "${dir}"\n'))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Fail fast")),(0,r.kt)("p",{parentName:"li"},"Set the following options at the top of scripts:"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"set -o errexit")," causes the script to exit when a command fails."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"set -o nounset")," will exit the script when it attempts to use an unset variable."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"set -o pipefail")," makes it so the exit code of the failing command is the exit code reterned from the script.")),(0,r.kt)("admonition",{parentName:"li",type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"Add ",(0,r.kt)("inlineCode",{parentName:"p"},"|| true")," to the end of any commands that are allowed to fail to prevent the script from exiting.")),(0,r.kt)("admonition",{parentName:"li",type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"If you need to access a variable that may not have been set, use ",(0,r.kt)("inlineCode",{parentName:"p"},"${VARNAME-}")," instead of ",(0,r.kt)("inlineCode",{parentName:"p"},"$VARNAME")," to safely reference it."))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Debugging")),(0,r.kt)("p",{parentName:"li"},"Use ",(0,r.kt)("inlineCode",{parentName:"p"},"set -o xtrace")," to get trace output as the script executes.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Provide help text")),(0,r.kt)("p",{parentName:"li"},"Every script should provide a help flag that prints descriptive text about the script and how to use it."))),(0,r.kt)("h2",{id:"example-boilerplate"},"Example Boilerplate"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'#!/usr/bin/env bash\n\nset -o errexit\nset -o pipefail\nset -o nounset\ntrap cleanup SIGINT SIGTERM ERR EXIT\n\nreadonly script_dir=$(cd "$(dirname "${BASH_SOURCE[0]}")" &>/dev/null && pwd -P)\n\nusage() {\n  cat <<EOF\nUsage: $(basename "${BASH_SOURCE[0]}") [-h] [-v] [-f] -p param_value arg1 [arg2...]\n\nScript description here.\n\nAvailable options:\n\n-h, --help      Print this help and exit\n-v, --verbose   Print script debug info\n-f, --flag      Some flag description\n-p, --param     Some param description\nEOF\n  exit\n}\n\ncleanup() {\n  trap - SIGINT SIGTERM ERR EXIT\n  # script cleanup here\n}\n\nsetup_colors() {\n  if [[ -t 2 ]] && [[ -z "${NO_COLOR-}" ]] && [[ "${TERM-}" != "dumb" ]]; then\n    NOFORMAT=\'\\033[0m\' RED=\'\\033[0;31m\' GREEN=\'\\033[0;32m\' ORANGE=\'\\033[0;33m\' BLUE=\'\\033[0;34m\' PURPLE=\'\\033[0;35m\' CYAN=\'\\033[0;36m\' YELLOW=\'\\033[1;33m\'\n  else\n    NOFORMAT=\'\' RED=\'\' GREEN=\'\' ORANGE=\'\' BLUE=\'\' PURPLE=\'\' CYAN=\'\' YELLOW=\'\'\n  fi\n}\n\nmsg() {\n  echo >&2 -e "${1-}"\n}\n\ndie() {\n  local msg=$1\n  local code=${2-1} # default exit status 1\n  msg "$msg"\n  exit "$code"\n}\n\nparse_params() {\n  # default values of variables set from params\n  flag=0\n  param=\'\'\n\n  while :; do\n    case "${1-}" in\n    -h | --help) usage ;;\n    -v | --verbose) set -o xtrace ;;\n    --no-color) NO_COLOR=1 ;;\n    -f | --flag) flag=1 ;; # example flag\n    -p | --param) # example named parameter\n      param="${2-}"\n      shift\n      ;;\n    -?*) die "Unknown option: $1" ;;\n    *) break ;;\n    esac\n    shift\n  done\n\n  args=("$@")\n\n  # check required params and arguments\n  [[ -z "${param-}" ]] && die "Missing required parameter: param"\n  [[ ${#args[@]} -eq 0 ]] && die "Missing script arguments"\n\n  return 0\n}\n\nmain() {\n    parse_params "$@"\n    setup_colors\n\n    # script logic here\n\n    msg "${RED}Read parameters:${NOFORMAT}"\n    msg "- flag: ${flag}"\n    msg "- param: ${param}"\n    msg "- arguments: ${args[*]-}"\n}\n\nmain "$@"\n\n')),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"Grant executable permissions for the script by running ",(0,r.kt)("inlineCode",{parentName:"p"},"chmod u+x this_script.sh"))))}m.isMDXComponent=!0}}]);