"use strict";(self.webpackChunklefthanded_dev=self.webpackChunklefthanded_dev||[]).push([[520],{9613:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>h});var n=a(9496);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function p(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),l=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):p(p({},t),e)),a},c=function(e){var t=l(e.components);return n.createElement(s.Provider,{value:t},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),m=l(a),u=r,h=m["".concat(s,".").concat(u)]||m[u]||d[u]||i;return a?n.createElement(h,p(p({ref:t},c),{},{components:a})):n.createElement(h,p({ref:t},c))}));function h(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,p=new Array(i);p[0]=u;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[m]="string"==typeof e?e:r,p[1]=o;for(var l=2;l<i;l++)p[l]=a[l];return n.createElement.apply(null,p)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},2141:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>p,default:()=>m,frontMatter:()=>i,metadata:()=>o,toc:()=>l});var n=a(4778),r=(a(9496),a(9613));const i={title:"Bash Script Best Practices",tags:["bash"]},p=void 0,o={unversionedId:"bash-script-best-practices",id:"bash-script-best-practices",title:"Bash Script Best Practices",description:"When writing Bash scripts these are a few best practices to follow:",source:"@site/docs/bash-script-best-practices.md",sourceDirName:".",slug:"/bash-script-best-practices",permalink:"/wiki/bash-script-best-practices",draft:!1,editUrl:"https://github.com/matthew-vance/lefthanded.dev/tree/main/docs/bash-script-best-practices.md",tags:[{label:"bash",permalink:"/wiki/tags/bash"}],version:"current",lastUpdatedBy:"Matthew Vance",lastUpdatedAt:1675772449,formattedLastUpdatedAt:"Feb 7, 2023",frontMatter:{title:"Bash Script Best Practices",tags:["bash"]},sidebar:"tutorialSidebar",previous:{title:"Automatic Set Upstream for New Git Branches",permalink:"/wiki/auto-set-upstream"},next:{title:"Safely Reading Environment Variables in NodeJS",permalink:"/wiki/safely-reading-env-vars-in-nodejs"}},s={},l=[{value:"Example Boilerplate",id:"example-boilerplate",level:2}],c={toc:l};function m(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"When writing Bash scripts these are a few best practices to follow:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Shebang")),(0,r.kt)("p",{parentName:"li"},"All bash scripts should start with a shebang. This tells the OS what binary to use as the script interpreter."),(0,r.kt)("admonition",{parentName:"li",type:"tip"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("inlineCode",{parentName:"p"},"#!/usr/bin/env bash")," is more portable than ",(0,r.kt)("inlineCode",{parentName:"p"},"#!/bin/bash"),"."))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Prefer long parameter notation")),(0,r.kt)("p",{parentName:"li"},"Using the full names of parameters makes the script easier to read."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'# Avoid:\nrm -rf -- "${dir}"\n\n# Good:\nrm --recursive --force -- "${dir}"\n'))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Fail fast")),(0,r.kt)("p",{parentName:"li"},"Set the following options at the top of scripts:"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"set -o errexit")," causes the script to exit when a command fails."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"set -o nounset")," will exit the script when it attempts to use an unset variable."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"set -o pipefail")," makes it so the exit code of the failing command is the exit code reterned from the script.")),(0,r.kt)("admonition",{parentName:"li",type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"Add ",(0,r.kt)("inlineCode",{parentName:"p"},"|| true")," to the end of any commands that are allowed to fail to prevent the script from exiting.")),(0,r.kt)("admonition",{parentName:"li",type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"If you need to access a variable that may not have been set, use ",(0,r.kt)("inlineCode",{parentName:"p"},"${VARNAME-}")," instead of ",(0,r.kt)("inlineCode",{parentName:"p"},"$VARNAME")," to safely reference it."))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Debugging")),(0,r.kt)("p",{parentName:"li"},"Use ",(0,r.kt)("inlineCode",{parentName:"p"},"set -o xtrace")," to get trace output as the script executes.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Provide help text")),(0,r.kt)("p",{parentName:"li"},"Every script should provide a help flag that prints descriptive text about the script and how to use it."))),(0,r.kt)("h2",{id:"example-boilerplate"},"Example Boilerplate"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'#!/usr/bin/env bash\n\nset -o errexit\nset -o pipefail\nset -o nounset\n\nusage() {\n  cat <<EOF\nUsage: $(basename "${BASH_SOURCE[0]}") [-h] [-v] [-f] -p param_value arg1 [arg2...]\n\nScript description here.\n\nAvailable options:\n\n-h, --help      Print this help and exit\n-v, --verbose   Print script debug info\n-f, --flag      Some flag description\n-p, --param     Some param description\nEOF\n  exit\n}\n\nmain() {\n    # script logic goes here\n}\n\nmain "$@"\n\n:::tip\n\nGrant executable permissions for the script by running `chmod u+x this_script.sh`\n\n:::\n')))}m.isMDXComponent=!0}}]);